<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jvm | 路边飞的博客]]></title>
  <link href="http://driftice.github.io/blog/categories/jvm/atom.xml" rel="self"/>
  <link href="http://driftice.github.io/"/>
  <updated>2013-07-30T10:16:10+08:00</updated>
  <id>http://driftice.github.io/</id>
  <author>
    <name><![CDATA[路边飞]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM虚拟机-笔记]]></title>
    <link href="http://driftice.github.io/blog/2013/07/23/jvm-jvm/"/>
    <updated>2013-07-23T15:22:00+08:00</updated>
    <id>http://driftice.github.io/blog/2013/07/23/jvm-jvm</id>
    <content type="html"><![CDATA[<h2>Java虚拟机是什么</h2>

<p>不同的场景，可能意味着不同的东西，包括：</p>

<ul>
<li>一种抽象规范</li>
<li>一种规范实现</li>
<li>一个运行实例</li>
</ul>


<h2>生命周期</h2>

<p>从main()函数开始，当所以非守护进程退出，或System.exit()时结束</p>

<h2>体系结构</h2>

<p>需要先明确： JVM规范定义的子系统、运行时数据区等，都只是一个抽象定义，只要能满足这些外部的行为，内部的具体实现完全可以由设计者决定。</p>

<ol>
<li><p>系统运行时结构</p>

<p> <img src="/images/jvm_runtime_system_arch.png"></p></li>
<li><p>Java栈运行时结构</p>

<p> <img src="/images/jvm_runtime_java_stack_arch.png"></p></li>
<li><p>数据类型</p>

<p> <img src="/images/jvm_runtime_base_type.png"></p>

<p> <strong>字(word)</strong>
 一个字没有固定长度，但要求：</p>

<ul>
<li>一个字可以表示int,byte,float等</li>
<li>两个字可以表示long,double</li>
<li>一个字可以表示一个引用</li>
</ul>


<p> 所以，通常一个字最少32bit。一般是特定平台上的指针长度。</p>

<p> <strong>特殊类型</strong></p>

<ul>
<li>boolean用byte或int表示</li>
<li>returnAddress,只用于虚拟机内部</li>
</ul>


<p> <strong>引用类型</strong></p>

<p> 三种引用</p>

<ul>
<li>类类型</li>
<li>接口类型</li>
<li>数组类型</li>
</ul>


<p> 还有一个特殊的null值</p>

<p> <strong>取值范围</strong></p>

<p> <img src="/images/jvm_runtime_base_type_value_range.png"></p></li>
<li><p>装载class</p>

<p> <strong>ClassLoader</strong></p>

<ol>
<li>findClass,loadClass</li>
<li>defineClass</li>
<li>resovleClass</li>
</ol>


<p> 具体见： <a href="http://driftice.github.io/blog/2013/07/22/jvm-security/">基本沙箱/类加载器(ClassLoader)</a></p></li>
<li><p>方法区</p>

<p> 存储加载的类型信息</p>

<p> <img src="/images/jvm_runtime_type_info.png"></p>

<p> <img src="/images/jvm_runtime_type_info_ref.png"></p></li>
<li><p>堆</p>

<p> 存储类实例和数组</p>

<p> <strong>垃圾收集</strong></p>

<p> 规范要求提供垃圾收集功能，但是不强求收集算法。</p>

<p> <strong>对象的内部表示</strong></p>

<p> 两种可选的模型：</p>

<p> <img src="/images/jvm_runtime_object_arch.png"></p>

<p> 一定是需要有一个类型信息的引用。因为：</p>

<ol>
<li>强制转型时需要检查；</li>
<li>引用并不一定引用真正的类型信息，在动态绑定时查找需要。</li>
</ol>


<p> <strong>对象的特殊信息</strong></p>

<ol>
<li><p>方法表。用于加快方法访问。</p>

<p> <img src="/images/jvm_runtime_object_method_area.png"></p></li>
<li><p>锁及其wait Set</p>

<p> 每一个对象都可以当做锁。但是，并不是每一个对象都会使用到，所以有可能把所有锁保存在以对象地址为索引的搜索树中。</p>

<p> wait set也是同样的原理。</p></li>
<li><p>垃圾收集标志</p>

<p> 是否被回收了，是否调用finalizer方法等。</p></li>
</ol>


<p> <strong>数组对象的内部表示</strong></p>

<p> 数据对象也是对象</p>

<p> <img src="/images/jvm_runtime_object_array_arch.png"></p></li>
<li><p>程序计数器（PC)</p>

<ul>
<li>每一线程都有独立的PC</li>
<li>PC的长度为一个字(word).既可以保存一个引用，也可以保存一个returnAdress</li>
<li>PC指向下一条指令的地址（可能是内存地址，也可能是相对偏移量），如果是本地方法，则为undefined</li>
</ul>
</li>
<li><p>Java栈</p>

<ul>
<li>Java栈的基本单位是栈帧，只有两种操作，压栈跟出栈</li>
<li>每一次方法调用都是一个栈帧。当前方法的栈帧称为<strong>当前帧</strong>，当前方法所属的类称为<strong>当前类</strong>，当前类的常量池称为<strong>当前常量池</strong></li>
<li>每种方法返回（出栈），一个是return，一个是抛出异常</li>
<li>栈数据是私有的，其他线程是无法访问的</li>
</ul>
</li>
<li><p>栈帧</p>

<p> 由三部分组成：</p>

<ul>
<li>局部变量区</li>
<li>操作数栈区</li>
<li>帧数据区</li>
</ul>


<p> 其中，局部变量区和操作数栈的大小在编译期已经确定。</p>

<p> <strong>局部变量区</strong></p>

<p> 局部变量是以字长为单位的数组，包括了<em>方法实参</em>和运行过程中的<em>局部变量</em>。每一个基本类型（long跟double除外）和引用占一个字，而long和double占用两个字</p>

<p> <img src="/images/jvm_runtime_java_stack_local_var.png"></p>

<p> 左边是一个类方法，而右边是一个实例方法。实例方法的第一个变量是对自身的引用。</p>

<p> <strong>操作数栈区</strong></p>

<p> 操作数栈也是以字长为单位的栈，用于存储字节码执行过程的参数、结果等。两个数的相加过程：</p>

<p> <img src="/images/jvm_runtime_java_stack_opt_stack.png"></p>

<p> <img src="/images/jvm_runtime_java_stack_opt_stack2.png"></p>

<p> <strong>帧数据区</strong></p>

<p> 用于支持常量池解析、正常方法返回、异常派发及其他一些任务。</p>

<ul>
<li><p>常量池解析</p>

<p>  例子：</p>

<pre><code>  public class Main {
      private final static int n = 3;

      public static void main(String[] args) {
          int a = n + 1;
      }
  }
</code></pre>

<p>  常量池为：</p>

<pre><code>  Constant pool:
  #1 = Class              #2             //  com/troy/Main
  #2 = Utf8               com/troy/Main
  #3 = Class              #4             //  java/lang/Object
  #4 = Utf8               java/lang/Object
  #5 = Utf8               n
  #6 = Utf8               I
  #7 = Utf8               ConstantValue
  #8 = Integer            3
  #9 = Utf8               &lt;init&gt;
  #10 = Utf8               ()V
  #11 = Utf8               Code
  #12 = Methodref          #3.#13         //  java/lang/Object."&lt;init&gt;":()V
  #13 = NameAndType        #9:#10         //  "&lt;init&gt;":()V
  #14 = Utf8               LineNumberTable
  #15 = Utf8               LocalVariableTable
  #16 = Utf8               this
  #17 = Utf8               Lcom/troy/Main;
  #18 = Utf8               main
  #19 = Utf8               ([Ljava/lang/String;)V
  #20 = Utf8               args
  #21 = Utf8               [Ljava/lang/String;
  #22 = Utf8               a
  #23 = Utf8               SourceFile
  #24 = Utf8               Main.java
</code></pre></li>
<li><p>正常方法返回</p>

<p>  当return时，需要出栈，并将PC设置被调用方法的指令，并将返回值压入栈（如果有返回值）</p></li>
<li><p>异常派发</p>

<p>  方法基本信息会保存一个异常表，表示每一个catch保护的范围。当异常发生的时候，需要查找此表，看是否有合适的处理(catch代码)，如果没有，则出栈，并在当前栈执行同样的判断。</p></li>
<li><p>其他任务</p>

<p>  比如调试信息（行号等）</p></li>
</ul>


<p> <strong>栈帧的可能实现方式</strong></p>

<ul>
<li>每一个栈帧都是独立的内存空间</li>
<li><p>相邻两个栈帧间交叠一部分区域。将前一个栈帧的操作数栈区的栈顶作为下一个栈帧的局部变量区的起始。如：</p>

<p>  <img src="/images/jvm_runtime_java_stack_impl.png"></p></li>
</ul>
</li>
<li><p>本地方法栈</p>

<p>当线程调用本地方法的时候，就进入一个不受虚拟控制的世界。本地方法本质上是依赖于实现的，虚拟机设计者可以自由地决定Java如何调用本地方法。</p>

<p>一个C模型的例子：</p>

<p><img src="/images/jvm_runtime_native_method.png"></p>

<p>对于本地方法的要求：</p>

<p><img src="/images/jvm_runtime_native_method_req.png"></p></li>
<li><p>执行引擎</p>

<p>执行引擎是JVM的核心，系统的行为就是由它执行字节码流决定的。每一个用户线程其实都是一个执行引擎实例（垃圾收集线程等系统线程不一定）。</p>

<p><strong>指令集</strong></p>

<p>指令=操作码 + 0到多个操作数 ， 一个操作码一个字的长度。操作数可以来自常量池、操作数栈以及局部变量表。</p>

<p>例子：</p>

<pre><code>public class Main {
    private int m = 0;

    public void test() {
        m++;

        int i=0;
        for(int j=0;j&lt;10;j++){
            i++;
        }
    }
}
</code></pre>

<p>编译后的test方法的字节码：</p>

<pre><code> Code:
   stack=3, locals=3, args_size=1
      0: aload_0
      1: dup
      2: getfield      #12                 // Field m:I
      5: iconst_1
      6: iadd
      7: putfield      #12                 // Field m:I
     10: iconst_0
     11: istore_1
     12: iconst_0
     13: istore_2
     14: goto          23
     17: iinc          1, 1
     20: iinc          2, 1
     23: iload_2
     24: bipush        10
     26: if_icmplt     17
     29: return
</code></pre>

<ul>
<li><em>iconst_0</em> 的操作数是0，它是往栈顶添加常量0</li>
<li><em>getfield #12</em> 的操作数是常量池的符号</li>
<li><em>iinc</em> 的操作数是局部变量</li>
<li><em>iadd</em> 的操作是1，是取栈顶的数+1，并且再压回栈顶。</li>
</ul>


<p><strong>影响指令集设计的几个方面</strong></p>

<ul>
<li>为了达到平台无关性，指令集的设计是以栈为中心的，大部分指令的操作数都是基于操作数栈的，而局部变量通常被视为类似于寄存器，而常量池主要是存储的一些符号。</li>
<li><p>以栈为中心还有另一个目的是（<strong>没看懂。。。</strong>*)</p>

<p>  <img src="/images/jvm_runtime_execute_engine_opcodes_principle.png"></p></li>
<li><p>字节码的紧凑性。但是严格的字节对齐，牺牲了一些优化的可能性。</p></li>
<li>字节码的可验证性。为了安全，在加载的class的时候，需要进行字节码验证。为了更好的支持这个过程，相当部分指令需要指明指令的类型（方便校验），比如store操作，对于int是istore，对于float是fstore，虽然它们的动作是一模一样，甚至可能实现也是一样的。</li>
</ul>


<p><strong>决定下一条指令的三种可能</strong></p>

<ul>
<li>紧跟在当前字节码后的下一条字节码</li>
<li>goto 或 return 指令</li>
<li>抛出异常时，需要检查异常表，决定是处理还是抛出</li>
</ul>


<p><strong>执行技术</strong></p>

<ul>
<li>直接解释字节码。</li>
<li>即时编译。全部转换成本地代码）</li>
<li>自适应编译。把最频繁的10-20%代码编译成本地代码。</li>
<li>硬件芯片编译。</li>
</ul>


<p><strong>线程</strong></p>

<p>Java定义了线程模型，目标是希望可以在不同的体系结构上实现它。</p>

<ul>
<li>线程的优先级是非常宽松的，可能对应本地的线程级别，也可以是另外的实现。优先级仅仅是表示这种时间片分配的期望，而非一个严格的标准。</li>
<li>线程必须支持同步的两个方面： <em>对象锁定</em> 以及 <em>线程等待与通知</em></li>
<li>线程的对于基本类型的操作必须是原子性的，除了非volatile的double和long（因为它们占了两个字，所以有可能是两步操作）</li>
<li>等等</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM网络移动性-笔记]]></title>
    <link href="http://driftice.github.io/blog/2013/07/22/jvm-network-mobility/"/>
    <updated>2013-07-22T16:46:00+08:00</updated>
    <id>http://driftice.github.io/blog/2013/07/22/jvm-network-mobility</id>
    <content type="html"><![CDATA[<h2>为什么需要网络移动性？</h2>

<ol>
<li><p>计算的模式发展</p>

<p> 从大型分时计算机到个人计算机集群的转变，使得计算模式从中心分时架构，变为N层C/S架构，再到分布式架构</p></li>
<li><p>一种新的软件模式</p>

<p> 逻辑跟数据 跟 运行容器 分离，可以在运行时，按需从网络获取相关的逻辑跟数据，组装成系统。其实就是B/S模式。</p>

<p> 可以解决代码的管理、升级、配置问题。</p></li>
<li><p>对网络移动性的支持</p>

<ul>
<li>动态连接。热加载class，避免一次性下载。</li>
<li>动态扩展。允许根据需要动态地扩展class集。</li>
<li>class文件格式的紧凑性</li>
<li>JAR包。减少下载次数。</li>
</ul>
</li>
<li><p>applet</p></li>
<li><p>JINI</p>

<ul>
<li>技术：　服务注册中心　+　　对象序列化　+　RMI</li>
<li>角色：　查找服务　＋　服务提供者　＋　客户机</li>
<li>协议：　网络协议（探索）　＋　对象协议（加入、查找）</li>
</ul>
</li>
<li><p>代码与对象的网络移动性是Java的<strong>设计中心</strong></p>

<p> 安全性 和 平台无关性 很多程度上为这上目标服务的。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM安全-笔记]]></title>
    <link href="http://driftice.github.io/blog/2013/07/22/jvm-security/"/>
    <updated>2013-07-22T16:00:00+08:00</updated>
    <id>http://driftice.github.io/blog/2013/07/22/jvm-security</id>
    <content type="html"><![CDATA[<h2>为什么需要安全？</h2>

<p>  安全模型使Java 成为网络环境的技术，因为它们建立了对网络移动代码安全执行的必要的可信机制。Java安全模型侧重于保护终端用户免受从网络下载的、来至于不可靠来源的、恶意程序的侵犯。而“沙箱”机制成为了这一目的的支持机制，在“沙箱”中存放不可信的 Java程序。“沙箱”对不可靠的程序的活动进行了限制，程序可以在“沙箱”的安全边界内做任何事，但是不能进行任何跨越这些边界的举动。</p>

<p>比如说, 在版本 1.0 中的沙箱对于很多不可靠的 applet 进行了如下限制：</p>

<ul>
<li>对本地硬盘的读写</li>
<li>进行任何网络连接，但是不能连接到提供这个applet 的源主机</li>
<li>创建新的进程</li>
<li>装载新的动态链接库</li>
</ul>


<h2>JVM的安全发展历史</h2>

<ol>
<li>1.0 基本沙箱。 可以严格控制代码可以做什么，不能做什么（访问控制）。</li>
<li>1.1 代码签名与认证。 基本沙箱的权限控制太过严格，导致很多正常的代码不能运行，所以引入代码签名与认证。可以针对一系列信任的代码（如JAR)提供信任策略。</li>
<li>1.2 细粒度的控制。 代码签名与认证的信任策略只能是完全信任和完全不信任，1.2引入细粒度的控制</li>
</ol>


<h2>1.0 基本沙箱</h2>

<ol>
<li><p>基本组成</p>

<ul>
<li>类加载器结构</li>
<li>Class文件检验器</li>
<li>内置于Java 虚拟机的安全特性</li>
<li>安全管理器及Java API</li>
</ul>


<p> 1.0、1.1一般需要定制安全管理器(ScurityManager)来实现定制，1.2后提供一个默认的安全管理器，这个管理器支持使用<strong>策略文件</strong>的形式来定制。</p></li>
<li><p>类加载器(ClassLoader)</p>

<p> 类加载器在以下三个方面对Java 的沙箱起着作用：</p>

<ul>
<li>它防止恶意代码去干涉善意的代码</li>
<li>它守护了被信任的类库的边界</li>
<li>它将代码归入某类（称为保护域），该类确定了代码可以进行哪些操作</li>
</ul>


<p> <strong>双亲委派</strong></p>

<p> 这是一个ClassLoader的查找过程，会在双亲中查找有没有加载相关的类，如果有，则有使用双亲中的类，如果没有，再由它加载。其中，<strong>启动类装载器</strong>跟<strong>标准扩展类装载器</strong>是JVM的系统装载器，不可更改的，而<strong>类路径装载器</strong>跟<strong>网络装载器</strong>是属于用户可定制的装载器。</p>

<p> 这样保证了基本类总由可信任的ClassLoader加载，避免一些类似Java.lang.Integer这样的类被篡改。</p>

<p> <img src="/images/jvm_classloader_find_path.PNG"></p>

<p> <strong>命名空间</strong></p>

<p> 不同ClassLoader之间，除非有父子关系（直接或间接），不然彼此之间是不可见的。比如同样一个类<em>com.troy.Test</em>，如果由两个不同的ClassLoader加载，就是不同的两个类（虽然行为是一样的），在JVM里分属不同的<strong>运行时包</strong></p>

<p> <img src="/images/jvm_classloader_namespace.png"></p></li>
<li><p>Class文件检验器</p>

<p> 保证装载的class文件有正确的内部结构，以及各个class文件是协调的。其安全目标就是保证程序的健壮性。毕竟，class文件不一定是由正常的编译器编译的，也有可能是黑客炮制的。</p>

<p> 总共四趟检查：</p>

<ol>
<li><p>第一趟：检查class文件的结构。</p>

<p> 就是检查class文件是否符合class文件格式，比如以0xCOFEBABE开头</p></li>
<li><p>第二趟：类型数据的语义检查</p>

<p> <strong>检查各个部分组成部分是否所属类型的实例，结构是否正确。</strong></p>

<p> 比如，检查方法描述符是否已经存储为字符器，并且符合上下文件无关文法。</p>

<p> <strong>检查是否符合特定条件</strong></p>

<p> 比如，检查一个类（除Object)外，是否都有有超类；final类没有被子类化，final方法没有被覆盖等。</p></li>
<li><p>第三趟：字节码验证。对<strong>字节码流</strong>进行数据流分析。</p>

<p> <strong>保证指序操作的合法性</strong></p>

<p> 比如，检查方法调用的参数类型是否正确，检查局部变量在初始化前不能被使用，操作数栈的总是包含正确的数值和类型等</p>

<p> <strong>安全检查</strong></p>

<p> 类似于“停机问题”，JVM也不可能写出一个可以检查出所有安全问题的程序。所以，策略是判定字节码流是否符合特定的<strong>规则集合</strong>，如果是，则判定为安全，如果不是，则视为不安全。</p></li>
<li><p>第四趟：符号引用验证。</p>

<p> 确保引用的正确性——从被验证的class文件，到被引用的class文件。因为JVM通常会使用懒加载机制，所以，这一趟通常是符号真正被引用的时候，才会进行。</p>

<p> <strong>动态连接</strong></p>

<p> 将<em>符号引号</em>解析为<em>直接引用</em>的过程。当JVM的操作码，它第一次使用了另一个类的引用时，需要进行解析：</p>

<pre><code> 1. 查找被引用的类（如果需要，就加载它）
 2. 将符号引用替代成直接引用，例如一个类的方法、字段的指针或偏移量。
</code></pre>

<p> 解析操作只有第一次引用时需要，JVM会记住相关的指针或偏移量，以后就直接使用直接引用。</p>

<p> <strong>保证二进制兼容性</strong></p>

<p> 比如：</p>

<ul>
<li>被引用的类是存在并且可以被合法加载的；</li>
<li>被引用的类的方法、字段是存在的；</li>
<li>被引用的类的方法返回的类型是合法的；</li>
<li>被引用的类的字段类型是合法的。</li>
</ul>
</li>
</ol>
</li>
<li><p>内置于Java 虚拟机的安全特性</p>

<ul>
<li>类型安全的引用转换</li>
<li>结构化的内存访问（无指针算法）</li>
<li>自动垃圾收集（不必要显式的释放被分配的内存）</li>
<li>数组边界检查</li>
<li>空引用检查</li>
</ul>
</li>
<li><p>安全管理器及Java API</p></li>
</ol>


<p>JDK文档中的安全管理器(SecurityManager)的定义：</p>

<blockquote><p>安全管理器是一个允许应用程序实现安全策略的类。它允许应用程序在执行一个可能不安全或敏感的操作前确定该操作是什么，以及是否是在允许执行该操作的安全上下文中执行它。应用程序可以允许或不允许该操作。</p>

<p>SecurityManager 类包含了很多名称以单词 check 开头的方法。Java 库中的各种方法在执行某些潜在的敏感操作前可以调用这些方法。对 check 方法的典型调用如下：</p>

<pre><code>SecurityManager security = System.getSecurityManager();
if (security != null) {
    security.checkXXX(argument,  . . . );
}
</code></pre>

<p>因此，安全管理器通过抛出异常来提供阻止操作完成的机会。如果允许执行该操作，则安全管理器例程只是简单地返回，但如果不允许执行该操作，则抛出一个 SecurityException。该约定的唯一例外是 checkTopLevelWindow，它返回 boolean 值。</p></blockquote>

<p><strong>兼容问题</strong></p>

<p>在新的JVM版本已经提供了一个默认实现，SecurityManager.checkXXX是老式方式，并不建议使用，但为了向下兼容，使用了以下的委派链。事实上，真正实现安全策略的是在AccessController类</p>

<p>SecurityManager的checkXXX系列方法 （委派）—> SecurityManager.checkPermission （委派）—> AccessController.checkPermission</p>

<h2>1.1 代码签名与认证</h2>

<p>认证策略可以让用户在一个沙箱中，实现多种安全策略</p>

<ol>
<li>代码签名</li>
</ol>


<p><strong>基础知识</strong>：散列、数字指纹、公私钥、数字签名。</p>

<p>签名过程：</p>

<p><img src="/images/jvm_code_signer_enc.png"></p>

<p>验证签名过程：</p>

<p><img src="/images/jvm_code_signer_dec.png"></p>

<ol>
<li>认证</li>
</ol>


<p><strong>基础知识</strong>：<a href="http://lukejin.iteye.com/blog/587200">证书链</a></p>

<p>为的是解决签名过程中公私钥的发布的安全问题</p>

<h2>1.2 细精度控制</h2>

<ol>
<li><p>策略</p>

<p> 依赖于代码签名与认证的能力，可以使用一个策略描述文件，来描述不同的签名或codebase的权限。</p>

<p> <strong>策略的类结构</strong></p>

<p> <img src="/images/jvm_policy_classes.png"></p>

<p> <strong>一个策略文件的例子</strong></p>

<p> <img src="/images/jvm_policy_file.PNG"></p></li>
<li><p>保护域</p>

<p> 策略文件中，一段策略描述就是一个保护域。保护域描述了CodeSource和PermissionCollection，在ClassLoader加载某一个类的时候，会将这个类与一个保护域关联起来。如下：</p>

<p> <img src="/images/jvm_protectiondomain.PNG"></p></li>
<li><p>访问控制器(AccessController)</p>

<p> <strong>原理</strong></p>

<p> AccessController是SecurityManager默认实现的真正执行类。由Accesscontroller的checkPermission（) 实现的基本算法决定了调用栈中的每个侦是否有权执行潜在不安全的操作。 每一个栈帧代表了由当前线程调用的某个方法， 每一个方法是在某
 个类中定义的, 每一个类又属于某个保护城，每个保护城包含一些权限，因此， 每个栈帧间接地和一些权限相关。</p>

<p> Accesscontroller的checkPermission（)至顶向下检查栈，只有有一个栈帧的权限不够，就会抛出异常。</p>

<p> <img src="/images/jvm_access_controller_check_stack.PNG"></p>

<p> <strong>AccessController.implies方法</strong></p>

<p> 这是Permission的方法，用于判断一个Permission是否蕴含另一个Permission，比如/var/* => /var/temp。</p>

<p> 一般来说，是调用我们描述的Permission.implies方法，来判断当前的Permission请求是否可以通过。</p>

<p> <strong>AccessController.doPrivileged方法</strong></p>

<p> 默认情况下，AccessController是会检查所有的堆栈，隐藏的结果就是，如果一个比较低权限的类调用比较高权限的类时，只能使用比较低的权限，而自动放弃同的权限。这在很多场合下是过分严格的，比如，一个受限无访问文件权限的类，调用了一个类，而这个需要去读取一个配置文件，这样的操作是会被禁止的。</p>

<p> 所以，为了避免这个情况，提供了一个方法doPrivileged静态方法，这个静态方法的作用是<strong>截断</strong>权限检查的栈帧，如下：</p>

<p> <img src="/images/jvm_do_privileged.PNG"></p>

<p> 这样的话，检查的栈帧就只会检查到此方法而已，如下（假设在Firend调用了以上的doPrivileged代码）：</p>

<p> <img src="/images/jvm_do_privileged2.PNG"></p></li>
</ol>


<h2>目前的不足</h2>

<ol>
<li><p>不能应付以下两种情况：</p>

<ul>
<li>耗尽内存</li>
<li>不断开新的Thread</li>
</ul>
</li>
<li><p>没有跟系统用户集成</p></li>
</ol>


<h2>基于此章写的示例:一个类似于ACM竞赛的判题系统</h2>

<p><a href="http://driftice.github.io/assets/judge.rar">判题系统</a></p>

<p>简单的实现，包括沙箱跟题目判定，目前没有限内存，也没有严格取得内存的使用量</p>

<p><strong>STEP 1</strong> 打开 wall 工程的 com.wall.main.Test，修改这两个路径</p>

<p><code>
String testClasspath = "file:/C:/troy/java_workspace/wallTest/bin/"; // wallTest工程的路径
String problemDir = "C:\\troy\\java_workspace\\wall\\problems";  // wall工程下的problems文件夹路径
</code></p>

<p><strong>STEP 2</strong> 运行Test， jvm 参数:</p>

<p><code>
java -Djava.security.manager -Djava.security.policy=C:\troy\java_workspace\wall\bin\policy.txt com.wall.main.Test
</code></p>

<p>java.security.policy 为 wall工程下的policy文件的路径</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM平台无关性-笔记]]></title>
    <link href="http://driftice.github.io/blog/2013/07/22/jvm-independence/"/>
    <updated>2013-07-22T15:17:00+08:00</updated>
    <id>http://driftice.github.io/blog/2013/07/22/jvm-independence</id>
    <content type="html"><![CDATA[<h2>为什么需要平台无关性？</h2>

<ol>
<li>设备多样化，可以不加修改地运行。</li>
<li>设备连网化，平台无关性，使得不同平台之间可以无缝地交换对象。比如，使用JINI技术</li>
<li>减少针对多平台开发的难度和工作量。</li>
</ol>


<h2>对平台无关性的支持</h2>

<ol>
<li><p>Java平台</p>

<p>  扮演着Java程序跟操作系统的缓冲角色，使得程序无需直接跟特定平台打交道</p></li>
<li><p>Java语言</p>

<p> 基本类型的值域跟行为都是自己的规范，跟平台无关</p></li>
<li><p>class文件</p>

<p> 特定于JVM的二进制格式，与平台无关，如字节序等</p></li>
<li><p>可伸缩性</p>

<p> Java平台可在不同的设备上实现，包括PC、嵌入式设备等。可根据不同的设备进行适当的裁剪，但要符合规范定义的功能子集。</p></li>
</ol>


<h2>影响平台无关性的因素</h2>

<ol>
<li><p>Java平台的部署</p>

<p> 目标平台是否有相关的Java平台实现</p></li>
<li><p>Java平台的版本</p>

<ul>
<li>各版本间的兼容性问题</li>
<li>不同的功能子集的问题</li>
<li>不同厂商针对特定平台的扩展功能问题</li>
</ul>
</li>
<li><p>本地方法</p></li>
<li>非标准运行时库</li>
<li>对JVM行为的依赖

<ul>
<li>不要依赖对象的finalization行为</li>
<li>不要依赖线程优先级</li>
</ul>
</li>
<li>对用户界面的依赖</li>
<li>Java平台的Bug
 如果目标平台集中有一个实现有Bug，会导致其他平台此功能不可使用。需要多测试。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM体系结构介绍-笔记]]></title>
    <link href="http://driftice.github.io/blog/2013/07/22/jvm-introduction/"/>
    <updated>2013-07-22T14:21:00+08:00</updated>
    <id>http://driftice.github.io/blog/2013/07/22/jvm-introduction</id>
    <content type="html"><![CDATA[<h2>为什么使用Java?</h2>

<p>网络化大潮，Java是为网络而设计。<strong>安全性</strong>、<strong>网络移动性</strong>及<strong>平台无关性</strong>都是围绕这个目标设计。</p>

<h2>体系结构</h2>

<p>四个独立但是相关的技术：</p>

<ul>
<li>Java程序设计语言</li>
<li>Java class文件格式</li>
<li>Java应用编程接口(API)</li>
<li>Java虚拟机</li>
</ul>


<h2>Java虚拟机</h2>

<p>Java虚拟机的主要任务是装载class文件，并且执行其中的代码。</p>

<p><img src="/images/jvm_architecture_intro.png"></p>

<p><strong>不同的虚拟机，可能有不同的执行引擎</strong></p>

<ul>
<li>直接解释字节码。</li>
<li>即时编译。全部转换成本地代码）</li>
<li>自适应编译。把最频繁的10-20%代码编译成本地代码。</li>
<li>硬件芯片编译。</li>
</ul>


<p><strong>本地方法与Java方法</strong></p>

<p>本地方法(JNI)用于与操作系统打交道，是平台相关的
Java方法就是纯Java实现的方法，是平台无关的</p>

<p><strong>ClassLoader</strong></p>

<p>解决的是安全性（隔离性）与网络移动性（动态加载class).分为两类：一类是JVM的系统加载器，称为<strong>bootstrap classloader</strong>，另一个类是用户自定义的加载器</p>

<h2>Java class文件</h2>

<p>在平台无关性、网络移动性更适应网络</p>

<ol>
<li>平台无关性
 独立于底层主机的二进制形式。以<strong>以字节码</strong>的形式，避免编译时与特定系统绑定。</li>
<li>网络移动性

<ul>
<li>更紧凑的格式</li>
<li>动态连接（使用时才加载）</li>
<li>动态扩展（可动态增加class)</li>
</ul>
</li>
</ol>


<h2>Java API</h2>

<p>Java API是运行库的集合，是Java平台都要实现的必要部分，可以安全地假设可以被获取到。在需要与主机资源打交道的时候，Java可以调用Java API来实现，从而避免平台相关。</p>

<p><img src="/images/jvm_java_api_instr.png"></p>

<h2>Java程序设计语言</h2>

<p>一门通用语言，并不局限与网络相关的领域。其核心思想是使得程序员更有效率，程序更加健壮，而且在于为新兴的网络为中心的计算环境提供一个工具。</p>

<ul>
<li>面向对象</li>
<li>多线程</li>
<li>结构化错误处理</li>
<li>垃圾收集</li>
<li>动态连接</li>
<li>动态扩展</li>
</ul>


<p>缺点：</p>

<ol>
<li>性能的问题</li>
<li>内存管理。回收的不确定性。</li>
<li>线程调度。过于宽松的线程规范，可能导致不同平台的调度方式不同。</li>
<li>功能的最小公分母问题。这是为实现跨平台的必然困难。</li>
<li>易于反编译。这是由于为了实现动态连接性，一个类对另一个类的引用是符号引用，而不是指针或偏移量。所以，被引用的类的方法，字段等，需要详细描述。使得反编译变得容易。混淆器可以减轻这个问题。</li>
</ol>

]]></content>
  </entry>
  
</feed>
